#!/bin/bash

# Cores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Diret√≥rio do projeto
PROJECT_DIR="/root/ai-assistant"

# Fun√ß√£o para limpar ambiente ap√≥s reset
clean_environment() {
    echo -e "${YELLOW}üßπ Limpando ambiente...${NC}"
    
    # Remove node_modules e reinstala depend√™ncias do frontend
    rm -rf "$PROJECT_DIR/frontend/node_modules"
    rm -f "$PROJECT_DIR/frontend/package-lock.json"
    
    # Limpa cache do npm
    cd "$PROJECT_DIR/frontend" && npm cache clean --force
    
    # Remove arquivos tempor√°rios
    find "$PROJECT_DIR" -name "*.log" -type f -delete
    find "$PROJECT_DIR" -name ".DS_Store" -type f -delete
    find "$PROJECT_DIR" -name "*.swp" -type f -delete
    
    # Remove cache do Python
    find "$PROJECT_DIR" -name "__pycache__" -type d -exec rm -rf {} +
    find "$PROJECT_DIR" -name "*.pyc" -type f -delete
    
    # Reinstala depend√™ncias do frontend
    cd "$PROJECT_DIR/frontend" && npm install
    
    # Reinstala depend√™ncias do backend
    cd "$PROJECT_DIR/backend" && pip install -r requirements.txt

    echo -e "${GREEN}‚ú® Ambiente limpo e restaurado com sucesso!${NC}"
}

# Verifica se est√° no diret√≥rio correto
if [ ! -d "$PROJECT_DIR/.git" ]; then
    echo -e "${RED}Erro: N√£o √© um reposit√≥rio git v√°lido${NC}"
    exit 1
fi

# Verifica o comando (commit ou reset)
if [ "$1" == "reset" ]; then
    echo -e "${YELLOW}Realizando reset...${NC}"
    cd "$PROJECT_DIR"
    git reset --hard HEAD~1
    clean_environment
    echo -e "${GREEN}Reset completado com sucesso!${NC}"
    exit 0
fi

# Vai para o diret√≥rio do projeto
cd "$PROJECT_DIR"

# Configura o timezone para S√£o Paulo
export TZ="America/Sao_Paulo"

# Obt√©m a data e hora atual no formato brasileiro
DATETIME=$(date '+%d/%m/%Y %H:%M:%S')

# Faz o add para poder pegar o hash do √∫ltimo commit
git add .

# Pega o hash do √∫ltimo commit
LAST_HASH=$(git rev-parse --short HEAD 2>/dev/null || echo "inicial")

# Mensagem autom√°tica com data/hora BR e hash
commit_message="[${DATETIME}] - ${LAST_HASH}"

# Para os containers Docker se estiverem rodando
echo -e "${YELLOW}Parando containers Docker...${NC}"
cd "$PROJECT_DIR/docker" && docker-compose down

# Adiciona todas as altera√ß√µes
echo -e "${GREEN}Adicionando altera√ß√µes...${NC}"
cd "$PROJECT_DIR" && git add .

# Faz o commit
echo -e "${GREEN}Realizando commit...${NC}"
git commit -m "$commit_message"

# Faz o push
echo -e "${GREEN}Realizando push...${NC}"
git push -f origin main

# Reinicia os containers Docker
echo -e "${YELLOW}Reiniciando containers Docker...${NC}"
cd "$PROJECT_DIR/docker" && docker-compose up -d --build

echo -e "${GREEN}Processo completado com sucesso!${NC}"
echo -e "${GREEN}Commit: $commit_message${NC}"
